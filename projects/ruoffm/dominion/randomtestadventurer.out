Test: 0 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 415
Test: 1 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 421
Test: 2 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =0
Bug in adventurer with Player: 2 and HandPos: 426
Test: 3 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 368
Test: 4 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 123
Test: 5 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 58
Test: 6 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 42
Test: 7 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 37
Test: 8 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 26
Test: 9 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 170
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 170
Test: 10 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 327
Test: 11 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 357
Test: 12 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 367
Test: 13 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 308
Test: 14 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 151
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 151
Test: 15 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 368
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 368
Test: 16 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 39
Test: 17 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 101
Test: 18 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 256
Test: 19 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 189
Test: 20 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 117
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 117
Test: 21 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 427
Test: 22 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 465
Test: 23 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 371
Test: 24 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 368
Test: 25 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 223
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 223
Test: 26 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 55
Test: 27 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 350
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 350
Test: 28 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 414
Test: 29 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 365
Test: 30 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 228
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 228
Test: 31 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 395
Test: 32 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 428
Test: 33 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 404
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 404
Test: 34 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 340
Test: 35 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 417
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 417
Test: 36 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 183
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 183
Test: 37 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 90
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 90
Test: 38 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 82
Test: 39 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 304
Test: 40 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 343
Test: 41 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 310
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 310
Test: 42 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 305
Test: 43 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 465
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 465
Test: 44 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 137
Test: 45 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 399
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 399
Test: 46 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 131
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 131
Test: 47 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 163
Test: 48 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 273
Test: 49 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 466
Test: 50 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 42
Test: 51 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 418
Test: 52 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 9
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 9
Test: 53 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 301
Test: 54 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 99
Test: 55 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 167
Test: 56 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 158
Test: 57 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 81
Test: 58 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 350
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 350
Test: 59 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 42
Test: 60 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 90
Test: 61 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 155
Test: 62 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 276
Test: 63 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 384
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 384
Test: 64 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 113
Test: 65 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =0
Bug in adventurer with Player: 1 and HandPos: 202
Test: 66 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 368
Test: 67 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 498
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 498
Test: 68 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 333
Test: 69 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 246
Test: 70 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 297
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 297
Test: 71 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 497
Test: 72 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 496
Test: 73 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 460
Test: 74 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 27
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 27
Test: 75 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 197
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 197
Test: 76 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 403
Test: 77 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 151
Test: 78 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 127
Test: 79 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 429
Test: 80 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 471
Test: 81 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 295
Test: 82 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 340
Test: 83 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 42
Test: 84 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 309
Test: 85 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 234
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 234
Test: 86 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 168
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 168
Test: 87 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 346
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 346
Test: 88 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 29
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 29
Test: 89 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 80
Test: 90 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 386
Test: 91 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 479
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 479
Test: 92 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 141
Test: 93 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 66
Test: 94 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 260
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 260
Test: 95 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 18
Test: 96 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 137
Test: 97 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 314
Test: 98 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 438
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 438
Test: 99 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 181
Test: 100 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 339
Test: 101 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 347
Test: 102 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 291
Test: 103 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 491
Test: 104 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 240
Test: 105 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =0
Bug in adventurer with Player: 1 and HandPos: 16
Test: 106 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 404
Test: 107 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 362
Test: 108 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 404
Test: 109 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 244
Test: 110 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 60
Test: 111 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 211
Test: 112 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 114
Test: 113 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 382
Test: 114 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 74
Test: 115 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 74
Test: 116 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 275
Test: 117 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 17
Test: 118 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 443
Test: 119 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 18
Test: 120 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 358
Test: 121 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 185
Test: 122 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 250
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 250
Test: 123 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 139
Test: 124 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 177
Test: 125 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 455
Test: 126 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 196
Test: 127 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 427
Test: 128 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 330
Test: 129 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 214
Test: 130 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 435
Test: 131 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 486
Test: 132 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 183
Test: 133 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 122
Test: 134 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 247
Test: 135 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 203
Test: 136 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 306
Test: 137 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 198
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 198
Test: 138 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 171
Test: 139 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 224
Test: 140 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 53
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 53
Test: 141 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 67
Test: 142 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 122
Test: 143 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 254
Test: 144 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 181
Test: 145 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 181
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 181
Test: 146 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 222
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 222
Test: 147 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 181
Test: 148 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 499
Test: 149 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 477
Test: 150 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 266
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 266
Test: 151 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 86
Test: 152 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 476
Test: 153 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 339
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 339
Test: 154 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 143
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 143
Test: 155 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 455
Test: 156 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 353
Test: 157 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 97
Test: 158 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 149
Test: 159 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 110
Test: 160 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 52
Test: 161 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 66
Test: 162 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 298
Test: 163 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 428
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 428
Test: 164 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 197
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 197
Test: 165 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 325
Test: 166 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 421
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 421
Test: 167 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 159
Test: 168 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 472
Test: 169 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 482
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 482
Test: 170 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 6
Test: 171 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 172
Test: 172 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 280
Test: 173 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 352
Test: 174 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 83
Test: 175 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 167
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 167
Test: 176 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 375
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 375
Test: 177 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 136
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 136
Test: 178 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 314
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 314
Test: 179 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 39
Test: 180 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 290
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 290
Test: 181 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 235
Test: 182 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 198
Test: 183 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 156
Test: 184 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 358
Test: 185 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 490
Test: 186 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 364
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 364
Test: 187 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 344
Test: 188 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 19
Test: 189 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 475
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 475
Test: 190 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 229
Test: 191 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 207
Test: 192 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 472
Test: 193 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 297
Test: 194 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 474
Test: 195 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 30
Test: 196 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 424
Test: 197 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 480
Test: 198 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 223
Test: 199 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 220
Test: 200 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 270
Test: 201 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 243
Test: 202 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 386
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 386
Test: 203 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 30
Test: 204 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 149
Test: 205 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 330
Test: 206 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 381
Test: 207 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 287
Test: 208 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 244
Test: 209 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 353
Test: 210 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 299
Test: 211 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 353
Test: 212 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 62
Test: 213 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 411
Test: 214 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 321
Test: 215 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 28
Test: 216 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 287
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 287
Test: 217 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 426
Test: 218 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 92
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 92
Test: 219 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 166
Test: 220 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 484
Test: 221 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 165
Test: 222 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 422
Test: 223 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 176
Test: 224 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 172
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 172
Test: 225 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 312
Test: 226 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 186
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 186
Test: 227 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 141
Test: 228 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 90
Test: 229 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 257
Test: 230 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 225
Test: 231 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 134
Test: 232 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 472
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 472
Test: 233 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 161
Test: 234 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 344
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 344
Test: 235 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 257
Test: 236 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 376
Test: 237 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 98
Test: 238 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 40
Test: 239 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 109
Test: 240 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 304
Test: 241 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 349
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 349
Test: 242 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 486
Test: 243 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 407
Test: 244 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 53
Test: 245 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 81
Test: 246 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 438
Test: 247 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 486
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 486
Test: 248 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 10
Test: 249 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 425
Test: 250 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 248
Test: 251 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 159
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 159
Test: 252 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 3
Test: 253 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 154
Test: 254 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 284
Test: 255 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 60
Test: 256 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 97
Test: 257 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 134
Test: 258 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 486
Test: 259 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 69
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 69
Test: 260 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 333
Test: 261 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 300
Test: 262 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 8
Test: 263 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 40
Test: 264 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 499
Test: 265 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 303
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 303
Test: 266 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 310
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 310
Test: 267 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 196
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 196
Test: 268 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 361
Test: 269 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 481
Test: 270 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 293
Test: 271 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 442
Test: 272 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 0
Test: 273 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 450
Test: 274 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 293
Test: 275 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 323
Test: 276 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 465
Test: 277 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 477
Test: 278 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 107
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 107
Test: 279 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 87
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 87
Test: 280 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 120
Test: 281 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 34
Test: 282 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 67
Test: 283 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 132
Test: 284 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 147
Test: 285 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 468
Test: 286 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 436
Test: 287 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 204
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 204
Test: 288 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 497
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 497
Test: 289 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 170
Test: 290 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 160
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 160
Test: 291 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 292
Test: 292 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 362
Test: 293 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 376
Test: 294 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 173
Test: 295 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 44
Test: 296 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 247
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 247
Test: 297 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 242
Test: 298 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 458
Test: 299 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 90
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 90
Test: 300 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 320
Test: 301 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 307
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 307
Test: 302 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 158
Test: 303 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 473
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 473
Test: 304 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 409
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 409
Test: 305 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 333
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 333
Test: 306 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 131
Test: 307 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 458
Test: 308 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 367
Test: 309 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 205
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 205
Test: 310 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 461
Test: 311 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 38
Test: 312 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 392
Test: 313 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 243
Test: 314 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 220
Test: 315 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 483
Test: 316 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 63
Test: 317 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 492
Test: 318 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 94
Test: 319 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 284
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 284
Test: 320 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 102
Test: 321 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 340
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 340
Test: 322 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 154
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 154
Test: 323 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 88
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 88
Test: 324 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 194
Test: 325 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 369
Test: 326 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 299
Test: 327 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 292
Test: 328 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 221
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 221
Test: 329 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 402
Test: 330 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 439
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 439
Test: 331 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 11
Test: 332 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 476
Test: 333 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 127
Test: 334 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 339
Test: 335 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 267
Test: 336 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 37
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 37
Test: 337 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 434
Test: 338 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 131
Test: 339 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 242
Test: 340 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 169
Test: 341 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 180
Test: 342 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 496
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 496
Test: 343 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 416
Test: 344 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 2
Test: 345 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 235
Test: 346 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 2
Test: 347 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 13
Test: 348 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 194
Test: 349 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 209
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 209
Test: 350 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 335
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 335
Test: 351 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 362
Test: 352 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 353
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 353
Test: 353 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 105
Test: 354 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 65
Test: 355 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 107
Test: 356 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 160
Test: 357 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 296
Test: 358 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 407
Test: 359 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 467
Test: 360 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 131
Test: 361 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 162
Test: 362 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 110
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 110
Test: 363 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 90
Test: 364 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 182
Test: 365 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 187
Test: 366 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 64
Test: 367 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 401
Test: 368 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 89
Test: 369 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 303
Test: 370 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 148
Test: 371 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 67
Test: 372 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 268
Test: 373 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 251
Test: 374 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 435
Test: 375 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 200
Test: 376 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 60
Test: 377 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 455
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 455
Test: 378 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 496
Test: 379 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 346
Test: 380 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 250
Test: 381 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 55
Test: 382 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 144
Test: 383 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 370
Test: 384 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 286
Test: 385 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 421
Test: 386 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 229
Test: 387 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 272
Test: 388 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 440
Test: 389 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 446
Test: 390 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 333
Test: 391 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 271
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 271
Test: 392 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 388
Test: 393 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 259
Test: 394 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 472
Test: 395 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 130
Test: 396 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 78
Test: 397 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 325
Test: 398 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 358
Test: 399 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 89
Test: 400 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 393
Test: 401 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 428
Test: 402 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 241
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 241
Test: 403 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 158
Test: 404 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 118
Test: 405 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 318
Test: 406 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 111
Test: 407 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 55
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 55
Test: 408 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 89
Test: 409 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 211
Test: 410 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 326
Test: 411 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 261
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 261
Test: 412 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 210
Test: 413 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 483
Test: 414 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 213
Test: 415 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 141
Test: 416 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 131
Test: 417 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 324
Test: 418 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 406
Test: 419 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 156
Test: 420 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 102
Test: 421 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 42
Test: 422 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 461
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 461
Test: 423 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 356
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 356
Test: 424 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 244
Test: 425 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 451
Test: 426 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 489
Test: 427 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 272
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 272
Test: 428 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 318
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 318
Test: 429 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 215
Test: 430 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 209
Test: 431 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 22
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 22
Test: 432 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 264
Test: 433 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 294
Test: 434 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 267
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 267
Test: 435 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 254
Test: 436 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 350
Test: 437 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 177
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 177
Test: 438 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 198
Test: 439 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 469
Test: 440 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 288
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 288
Test: 441 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 27
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 27
Test: 442 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 399
Test: 443 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 188
Test: 444 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 239
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 239
Test: 445 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 306
Test: 446 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 386
Test: 447 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 126
Test: 448 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 181
Test: 449 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 14
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 14
Test: 450 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 235
Test: 451 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 7
Test: 452 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 37
Test: 453 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 368
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 368
Test: 454 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 159
Test: 455 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 275
Test: 456 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 97
Test: 457 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 117
Test: 458 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 259
Test: 459 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 30
Test: 460 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 313
Test: 461 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 394
Test: 462 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 339
Test: 463 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 442
Test: 464 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 302
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 302
Test: 465 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 101
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 101
Test: 466 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 439
Test: 467 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 180
Test: 468 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 203
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 203
Test: 469 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 252
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 252
Test: 470 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 48
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 48
Test: 471 
Testing handCount size, should not be greater than 2 than initial. initial= 6,after=6
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 54
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 54
Test: 472 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 342
Test: 473 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 264
Test: 474 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 204
Test: 475 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 160
Test: 476 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 488
Test: 477 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 325
Test: 478 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 382
Test: 479 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 286
Test: 480 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 309
Test: 481 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 451
Test: 482 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 264
Test: 483 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 3
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 3
Test: 484 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 467
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 467
Test: 485 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 292
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 292
Test: 486 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 400
Test: 487 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 159
Test: 488 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 402
Test: 489 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 361
Test: 490 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 321
Test: 491 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 280
Test: 492 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 436
Test: 493 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=5
testing return value
incorrect return value, was not 0 with Player: 0 and HandPos: 259
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =5
Bug in adventurer with Player: 0 and HandPos: 259
Test: 494 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 484
Test: 495 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 158
Test: 496 
Testing handCount size, should not be greater than 2 than initial. initial= 5,after=6
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =6
Bug in adventurer with Player: 0 and HandPos: 161
Test: 497 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 3 and HandPos: 462
Test: 498 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 2 and HandPos: 138
Test: 499 
Testing handCount size, should not be greater than 2 than initial. initial= 0,after=1
testing return value
storing copper and silver in hand for proper increase
HandCount Not increased properly,handcoutn =1
Bug in adventurer with Player: 1 and HandPos: 140
File 'dominion.c'
Lines executed:25.00% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    34770:    8:int compare(const void* a, const void* b) {
    34770:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    34770:   11:  if (*(int*)a < *(int*)b)
     9272:   12:    return -1;
    25498:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
     1000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      230:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      770:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     8470:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    84700:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    77000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      770:   73:  if (numPlayers == 2)
        -:   74:    {
      262:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      508:   77:  else if (numPlayers == 3)
        -:   78:    {
      238:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      270:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      770:   87:  if (numPlayers == 2)
        -:   88:    {
      262:   89:      state->supplyCount[estate] = 8;
      262:   90:      state->supplyCount[duchy] = 8;
      262:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      508:   95:      state->supplyCount[estate] = 12;
      508:   96:      state->supplyCount[duchy] = 12;
      508:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      770:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      770:  102:  state->supplyCount[silver] = 40;
      770:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    16170:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   127050:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   119350:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     7700:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     1540:  115:		  if (numPlayers == 2){ 
      262:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      508:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     6930:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     7700:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   111650:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3088:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     2318:  140:      state->deckCount[i] = 0;
     9272:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     6954:  143:	  state->deck[i][j] = estate;
     6954:  144:	  state->deckCount[i]++;
        -:  145:	}
    18544:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    16226:  148:	  state->deck[i][j] = copper;
    16226:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3088:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     2318:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3088:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2318:  166:      state->handCount[i] = 0;
     2318:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    21560:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    20790:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      770:  182:  state->outpostPlayed = 0;
      770:  183:  state->phase = 0;
      770:  184:  state->numActions = 1;
      770:  185:  state->numBuys = 1;
      770:  186:  state->playedCardCount = 0;
      770:  187:  state->whoseTurn = 0;
      770:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     4620:  192:  for (it = 0; it < 5; it++){
     3850:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      770:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      770:  198:  return 0;
        -:  199:}
        -:  200:
     2318:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2318:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2318:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     2318:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    27816:  214:  while (state->deckCount[player] > 0) {
    23180:  215:    card = floor(Random() * state->deckCount[player]);
    23180:  216:    newDeck[newDeckPos] = state->deck[player][card];
    23180:  217:    newDeckPos++;
    74778:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    51598:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    23180:  221:    state->deckCount[player]--;
        -:  222:  }
    25498:  223:  for (i = 0; i < newDeckPos; i++) {
    23180:  224:    state->deck[player][i] = newDeck[i];
    23180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2318:  228:  return 0;
        -:  229:}
        -:  230:
     1000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     1000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     1000:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     1000:  243:  if ( state->numActions < 1 )
        -:  244:    {
      228:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      772:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      772:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
        3:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
      769:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
      769:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      769:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
      769:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      772:  315:int handCard(int handPos, struct gameState *state) {
      772:  316:  int currentPlayer = whoseTurn(state);
      772:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     1541:  346:int whoseTurn(struct gameState *state) {
     1541:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     4898:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4898:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     4898:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4898:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4898:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4898:  576:    state->deckCount[player]--;
     4898:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     4898:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int smithyfunc(int currentPlayer, struct gameState *state, int handPos)
        -:  647:{
        -:  648:	 int i;
        -:  649:	 //+3 Cards
    #####:  650:      for (i = 0; i < 3; i++)
        -:  651:	{
    #####:  652:	  drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:			
        -:  655:      //discard card from hand
    #####:  656:      discardCard(handPos, currentPlayer, state, 0);
    #####:  657:      return 0;
        -:  658:}
        -:  659:
      769:  660:int adventurerfunc(int currentPlayer, struct gameState *state, int drawntreasure, int cardDrawn)
        -:  661:{
      769:  662:	int z=0;
        -:  663:	int temphand[MAX_HAND];
     2586:  664:	while(drawntreasure<2){
     1048:  665:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  666:	  shuffle(currentPlayer, state);
        -:  667:	}
     1048:  668:	drawCard(currentPlayer, state);
     1048:  669:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     1048:  670:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      769:  671:	  drawntreasure+=2;
        -:  672:	else{
      279:  673:	  temphand[z]=cardDrawn;
      279:  674:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      279:  675:	  z++;
        -:  676:	}
        -:  677:      }
     1817:  678:      while(z-1>=0){
      279:  679:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      279:  680:	z=z-1;
        -:  681:      }
      769:  682:      return 0;
        -:  683:}
        -:  684:
    #####:  685:int gardfunc()
        -:  686:{
    #####:  687:	return 0;
        -:  688:}
        -:  689:
    #####:  690:int greathallfunc(int currentPlayer, struct gameState *state, int handPos)
        -:  691:{
        -:  692:	   //+1 Card
    #####:  693:      drawCard(currentPlayer, state);
        -:  694:			
        -:  695:      //+1 Actions
    #####:  696:      state->numActions++;
        -:  697:			
        -:  698:      //discard card from hand
    #####:  699:	  handPos++;
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
    #####:  701:      return 0;
        -:  702:}
        -:  703:
        -:  704:
    #####:  705:int villagefunc(int currentPlayer, struct gameState *state, int handPos)
        -:  706:{
        -:  707:	  //+1 Card
    #####:  708:      drawCard(currentPlayer, state);
        -:  709:			
        -:  710:      //+2 Actions
    #####:  711:      state->numActions = state->numActions + 2;
        -:  712:			
        -:  713:      //discard played card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
    #####:  715:      return 0;
        -:  716:}
        -:  717:
        -:  718:
      769:  719:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  720:{
        -:  721:  int i;
        -:  722:  int j;
        -:  723:  int k;
        -:  724:  int x;
        -:  725:  int index;
      769:  726:  int currentPlayer = whoseTurn(state);
      769:  727:  int nextPlayer = currentPlayer + 1;
        -:  728:
      769:  729:  int tributeRevealedCards[2] = {-1, -1};
        -:  730:  int temphand[MAX_HAND];// moved above the if statement
      769:  731:  int drawntreasure=0;
        -:  732:  int cardDrawn;
      769:  733:  int z = 0;// this is the counter for the temp hand
      769:  734:  if (nextPlayer > (state->numPlayers - 1)){
      289:  735:    nextPlayer = 0;
        -:  736:  }
        -:  737:  
        -:  738:	
        -:  739:  //uses switch to select card and perform actions
      769:  740:  switch( card ) 
        -:  741:    {
        -:  742:    case adventurer:
      769:  743:      return adventurerfunc(currentPlayer, state, drawntreasure, cardDrawn);
        -:  744:			
        -:  745:    case council_room:
        -:  746:      //+4 Cards
    #####:  747:      for (i = 0; i < 4; i++)
        -:  748:	{
    #####:  749:	  drawCard(currentPlayer, state);
        -:  750:	}
        -:  751:			
        -:  752:      //+1 Buy
    #####:  753:      state->numBuys++;
        -:  754:			
        -:  755:      //Each other player draws a card
    #####:  756:      for (i = 0; i < state->numPlayers; i++)
        -:  757:	{
    #####:  758:	  if ( i != currentPlayer )
        -:  759:	    {
    #####:  760:	      drawCard(i, state);
        -:  761:	    }
        -:  762:	}
        -:  763:			
        -:  764:      //put played card in played card pile
    #####:  765:      discardCard(handPos, currentPlayer, state, 0);
        -:  766:			
    #####:  767:      return 0;
        -:  768:			
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
    #####:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  773:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  774:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
    #####:  779:      updateCoins(currentPlayer, state, 5);
    #####:  780:      x = 1;//Condition to loop on
    #####:  781:      while( x == 1) {//Buy one card
    #####:  782:	if (supplyCount(choice1, state) <= 0){
        -:  783:	  if (DEBUG)
        -:  784:	    printf("None of that card left, sorry!\n");
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:	  }
        -:  789:	}
    #####:  790:	else if (state->coins < getCost(choice1)){
    #####:  791:	  printf("That card is too expensive!\n");
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:	  }
        -:  796:	}
        -:  797:	else{
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
    #####:  803:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  804:	  x = 0;//No more buying cards
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
        -:  810:	}
        -:  811:      }     
        -:  812:
        -:  813:      //Reset Hand
    #####:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  815:	state->hand[currentPlayer][i] = temphand[i];
    #####:  816:	temphand[i] = -1;
        -:  817:      }
        -:  818:      //Reset Hand
        -:  819:      			
    #####:  820:      return 0;
        -:  821:			
        -:  822:    case gardens:
    #####:  823:      return gardfunc();
        -:  824:			
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:		
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	{
    #####:  851:	  if (state->hand[currentPlayer][i] == j)
        -:  852:	    {
    #####:  853:	      discardCard(i, currentPlayer, state, 0);			
    #####:  854:	      break;
        -:  855:	    }
        -:  856:	}
        -:  857:			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case smithy:
    #####:  887:		return smithyfunc(currentPlayer, state, handPos);
        -:  888:		
        -:  889:    case village:
    #####:  890:      return villagefunc(currentPlayer, state, handPos);
        -:  891:		
        -:  892:    case baron:
    #####:  893:      state->numBuys++;//Increase buys by 1!
    #####:  894:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  895:	int p = 0;//Iterator for hand!
    #####:  896:	int card_not_discarded = 1;//Flag for discard set!
    #####:  897:	while(card_not_discarded){
    #####:  898:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  899:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  900:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  901:	    state->discardCount[currentPlayer]++;
    #####:  902:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  903:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  904:	    }
    #####:  905:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  906:	    state->handCount[currentPlayer]--;
    #####:  907:	    card_not_discarded = 0;//Exit the loop
        -:  908:	  }
    #####:  909:	  else if (p > state->handCount[currentPlayer]){
        -:  910:	    if(DEBUG) {
        -:  911:	      printf("No estate cards in your hand, invalid choice\n");
        -:  912:	      printf("Must gain an estate if there are any\n");
        -:  913:	    }
    #####:  914:	    if (supplyCount(estate, state) > 0){
    #####:  915:	      gainCard(estate, state, 0, currentPlayer);
    #####:  916:	      state->supplyCount[estate]--;//Decrement estates
    #####:  917:	      if (supplyCount(estate, state) == 0){
    #####:  918:		isGameOver(state);
        -:  919:	      }
        -:  920:	    }
    #####:  921:	    card_not_discarded = 0;//Exit the loop
        -:  922:	  }
        -:  923:			    
        -:  924:	  else{
    #####:  925:	    p++;//Next card
        -:  926:	  }
        -:  927:	}
        -:  928:      }
        -:  929:			    
        -:  930:      else{
    #####:  931:	if (supplyCount(estate, state) > 0){
    #####:  932:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  933:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  934:	  if (supplyCount(estate, state) == 0){
    #####:  935:	    isGameOver(state);
        -:  936:	  }
        -:  937:	}
        -:  938:      }
        -:  939:	    
        -:  940:      
    #####:  941:      return 0;
        -:  942:		
        -:  943:    case great_hall:
    #####:  944:		return greathallfunc(currentPlayer, state, handPos);
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
        -:  987:			{
    #####:  988:			  drawCard(i, state);
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
    #####: 1002:	  drawCard(currentPlayer, state);
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
        -: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1069:	  drawCard(currentPlayer, state);
    #####: 1070:	  drawCard(currentPlayer, state);
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
        -: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1154:			{
        -: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      for (i = 0; i < state->numPlayers; i++){
    #####: 1215:	if (i != currentPlayer){
    #####: 1216:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1217:	  state->discardCount[i]++;
    #####: 1218:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1219:	}
        -: 1220:      }
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
    #####: 1257:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1258:{
        -: 1259:	
        -: 1260:  //if card is not trashed, added to Played pile 
    #####: 1261:  if (trashFlag < 1)
        -: 1262:    {
        -: 1263:      //add card to played pile
    #####: 1264:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1265:      state->playedCardCount++;
        -: 1266:    }
        -: 1267:	
        -: 1268:  //set played card to -1
    #####: 1269:  state->hand[currentPlayer][handPos] = -1;
        -: 1270:	
        -: 1271:  //remove card from player's hand
    #####: 1272:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1273:    {
        -: 1274:      //reduce number of cards in hand
    #####: 1275:      state->handCount[currentPlayer]--;
        -: 1276:    }
    #####: 1277:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
    #####: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:  else 	
        -: 1283:    {
        -: 1284:      //replace discarded card with last card in hand
    #####: 1285:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1286:      //set last card to -1
    #####: 1287:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:	
    #####: 1292:  return 0;
        -: 1293:}
        -: 1294:
    #####: 1295:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1296:{
        -: 1297:  //Note: supplyPos is enum of choosen card
        -: 1298:	
        -: 1299:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1300:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1301:    {
    #####: 1302:      return -1;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //added card for [whoseTurn] current player:
        -: 1306:  // toFlag = 0 : add to discard
        -: 1307:  // toFlag = 1 : add to deck
        -: 1308:  // toFlag = 2 : add to hand
        -: 1309:
    #####: 1310:  if (toFlag == 1)
        -: 1311:    {
    #####: 1312:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1313:      state->deckCount[player]++;
        -: 1314:    }
    #####: 1315:  else if (toFlag == 2)
        -: 1316:    {
    #####: 1317:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1318:      state->handCount[player]++;
        -: 1319:    }
        -: 1320:  else
        -: 1321:    {
    #####: 1322:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1323:      state->discardCount[player]++;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //decrease number in supply pile
    #####: 1327:  state->supplyCount[supplyPos]--;
        -: 1328:	 
    #####: 1329:  return 0;
        -: 1330:}
        -: 1331:
     1539: 1332:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1333:{
        -: 1334:  int i;
        -: 1335:	
        -: 1336:  //reset coin count
     1539: 1337:  state->coins = 0;
        -: 1338:
        -: 1339:  //add coins for each Treasure card in player's hand
     7548: 1340:  for (i = 0; i < state->handCount[player]; i++)
        -: 1341:    {
     6009: 1342:      if (state->hand[player][i] == copper)
        -: 1343:	{
     4427: 1344:	  state->coins += 1;
        -: 1345:	}
     1582: 1346:      else if (state->hand[player][i] == silver)
        -: 1347:	{
        2: 1348:	  state->coins += 2;
        -: 1349:	}
     1580: 1350:      else if (state->hand[player][i] == gold)
        -: 1351:	{
    #####: 1352:	  state->coins += 3;
        -: 1353:	}	
        -: 1354:    }	
        -: 1355:
        -: 1356:  //add bonus
     1539: 1357:  state->coins += bonus;
        -: 1358:
     1539: 1359:  return 0;
        -: 1360:}
        -: 1361:
        -: 1362:
        -: 1363://end of dominion.c
        -: 1364:
